mainmodule particleSimulation {

  include "particle.h";
  readonly CProxy_Main mainProxy;
  readonly CProxy_Cell cellProxy;
  readonly int particlesPerCell;
  readonly int numCellsPerDim;
  readonly double boxMax;
  readonly double boxMin;
  readonly double cellDim;

  initnode void registerCalculateTotalAndMax(void);

  mainchare Main {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void receiveReductionData(CkReductionMsg *data);
  };

  array [2D] Cell {
    entry Cell(void); // constructor

    entry void updateNeighbor(int iter, std::vector<Particle> incoming);

    // Main computation
    entry void run() {
      for(iteration=1; iteration<=ITERATION; iteration++){

          serial{
            // Allow the particles to move around
            updateParticles(iteration);
          }

          for(numReceived=0; numReceived<8; numReceived++){
            when receiveUpdate[iteration] (int iter, std::vector<Particle> incoming) serial {
              // Update the current cell with the incoming particles
              updateNeighbor(iter, incoming);
            }
          }

          serial{
            reduceTotalAndMax();
          }

          if(iteration % LBFREQ == 0 && iteration != ITERATION){
            serial{ AtSync(); } when ResumeFromSync() {}
          }
      }//end of the iteration loop
    };

    entry void receiveUpdate(int iter, std::vector<Particle> incoming);
    entry void ResumeFromSync();
  };
};
