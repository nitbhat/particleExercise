mainmodule particleSimulation {

  include "particle.h";
  readonly CProxy_Main mainProxy;
  readonly CProxy_Cell cellProxy;
  readonly int particlesPerCell;
  readonly int numCellsPerDim;
  readonly int iterations;
  readonly int lbFreq;
  readonly double boxMax;
  readonly double boxMin;
  readonly double cellDim;

#if LIVEVIZ_RUN
  readonly double pixelScale;
#endif

  initnode void registerCalculateTotalAndOutbound(void);

  mainchare Main {
    entry Main(CkArgMsg* m);
    entry [reductiontarget] void receiveReductionData(CkReductionMsg *data);
    entry [reductiontarget] void done();

#if BONUS_QUESTION
    entry [reductiontarget] void computeMin(int min);
    entry [reductiontarget] void computeMax(int max);
#endif
  };

  array [2D] Cell {
    entry Cell(void); // constructor

    entry void updateNeighbor(int iter, std::vector<Particle> incoming, int senderX, int senderY);

    // Main computation
    entry void run() {
      for(iteration=1; iteration<=iterations; iteration++){

          serial{
            // Allow the particles to move around
            updateParticles(iteration);
          }

          for(numReceived=0; numReceived<8; numReceived++){
            when receiveUpdate[iteration] (int iter, std::vector<Particle> incoming, int senderX, int senderY) serial {
              // Update the current cell with the incoming particles
              updateNeighbor(iter, incoming, senderX, senderY);
            }
          }

          serial{
            reduceTotalAndMax();
          }

          if(iteration % lbFreq == 0 && iteration != iterations){
            serial{ AtSync(); } when ResumeFromSync() {}
          }
      }//end of the iteration loop

#if BONUS_QUESTION
      serial {
        contributeToReduction();
      }
#endif
    };

    entry void receiveUpdate(int iter, std::vector<Particle> incoming, int senderX, int senderY);
    entry void ResumeFromSync();
    entry void sortAndDump(string subFolderName);

#if LIVEVIZ_RUN
    entry void mapChareToImage(liveVizRequestMsg *m);
#endif
  };
};
